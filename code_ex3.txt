// ----------------------- OpenPose C++ API Tutorial - Example 3 - Body from image -----------------------
// It reads an image, process it, and displays it with the pose (and optionally hand and face) keypoints. In addition,
// it includes all the OpenPose configuration flags (enable/disable hand, face, output saving, etc.).

// Command-line user intraface
#define OPENPOSE_FLAGS_DISABLE_PRODUCER
#define OPENPOSE_FLAGS_DISABLE_DISPLAY
#include <openpose/flags.hpp>
// OpenPose dependencies
#include <openpose/headers.hpp>

// Custom OpenPose flags
// Producer
DEFINE_string(image_path, "C:/Users/BlackPink/Documents/GitHub/openpose/New folder/",
	"Process an image. Read all standard formats (jpg, png, bmp, etc.).");
//DEFINE_string(frame_left_path, "D:/cap_l_r/left_examples/frame_left40.jpg",
//"Process an image. Read all standard formats (jpg, png, bmp, etc.).");
//DEFINE_string(frame_right_path, "D:/cap_l_r/right_examples/frame_right40.jpg",
//"Process an image. Read all standard formats (jpg, png, bmp, etc.).");

// Display
DEFINE_bool(no_display, false,
	"Enable to disable the visual display.");

//khai bao bien
cv::Mat frame_left;
cv::Mat gray_frame_left;
//cv::Mat gray_frame_left_result;
cv::Mat frame_left_RGB;
cv::Mat frame_right;
cv::Mat gray_frame_right;
//cv::Mat gray_frame_right_result;
cv::Mat frame_right_RGB;
cv::Mat frame_L_R_gray(cv::Size(1280, 480), CV_8UC1);
cv::Mat templ_gray_3_parts(cv::Size(93, 31), CV_8UC1);
cv::Mat result_templ_gray_3_parts(cv::Size(1830, 450), CV_8UC1);
cv::Mat frame_L_R_RBG(cv::Size(1280, 480), CV_8UC3);
cv::Mat templ_L[3];
cv::Mat result_templ;

std::array<float, 3> x_center_frame_L;// bodyPart =[0{2,  ""},1{3,  "RElbow"},2{4,  "RWrist"},]
std::array<float, 3> y_center_frame_L;// bodyPart =[{2,  "RShouldeRShoulderr"},{3,  "RElbow"},{4,  "RWrist"},]
std::array<float, 3> score_center_frame_L;// bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]
std::array<float, 3> x_center_frame_R;// bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]
std::array<float, 3> y_center_frame_R;// bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]
std::array<float, 3> X_REAL;// bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]
std::array<float, 3> Y_REAL;// bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]
std::array<float, 3> Z_REAL;// bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]




unsigned int stt = 0;
int stt_limit = 0;
int size_template = 37;
int i = 0;
int i_limit = 0;



// This worker will just read and return all the jpg files in a directory

void printKeypoints(const std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>& datumsPtr)
{
	try
	{
		// Example: How to use the pose keypoints
		if (datumsPtr != nullptr && !datumsPtr->empty())
		{
			// Alternative 4 - Accesing each element of the keypoints
			op::log("\nKeypoints of image: ", op::Priority::High);
			const auto& poseKeypoints = datumsPtr->at(0)->poseKeypoints;
			op::log("Person pose keypoints:", op::Priority::High);

			for (auto person = 0; person < 1; person++)
			{
				op::log("Person " + std::to_string(person) + " (x, y, score):", op::Priority::High);
				for (auto bodyPart = 2; bodyPart < 5; bodyPart++)
				{

					// bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]
					if (bodyPart == 2)
					{
						op::log("{2,  RShoulder||0}", op::Priority::High);

					}
					if (bodyPart == 3)
					{
						op::log("{3,  RElbow||1}", op::Priority::High);

					}
					if (bodyPart == 4)
					{
						op::log("{4,  RWrist||2}", op::Priority::High);

					}
					for (auto xyscore = 0; xyscore < poseKeypoints.getSize(2); xyscore++)
					{

						if (xyscore == 0)// get x coordinates
						{
							x_center_frame_L[bodyPart - 2] = poseKeypoints[{person, bodyPart, xyscore}];

						}
						if (xyscore == 1) //get y coordinates
						{
							y_center_frame_L[bodyPart - 2] = poseKeypoints[{person, bodyPart, xyscore}];

						}
						if (xyscore == 2) //get % how exactly
						{
							score_center_frame_L[bodyPart - 2] = poseKeypoints[{person, bodyPart, xyscore}];
						}

					}
					//valueToPrint += std::to_string(   poseKeypoints[{person, bodyPart, xyscore}]   ) + " ";

					//op::log(valueToPrint, op::Priority::High);

					op::log("x=" + std::to_string(x_center_frame_L[bodyPart - 2]) + " " + "y=" + std::to_string(y_center_frame_L[bodyPart - 2]) + " " + "score=" + std::to_string(score_center_frame_L[bodyPart - 2]), op::Priority::High);
				}
			}
			op::log(" ", op::Priority::High);
		}
		else
			op::log("Nullptr or empty datumsPtr found.", op::Priority::High);
	}
	catch (const std::exception& e)
	{
		op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
	}
}

void configureWrapper(op::Wrapper& opWrapper)
{
	try
	{
		// Configuring OpenPose

		// logging_level
		op::check(0 <= FLAGS_logging_level && FLAGS_logging_level <= 255, "Wrong logging_level value.",
			__LINE__, __FUNCTION__, __FILE__);
		op::ConfigureLog::setPriorityThreshold((op::Priority)FLAGS_logging_level);
		op::Profiler::setDefaultX(FLAGS_profile_speed);

		// Applying user defined configuration - GFlags to program variables
		// outputSize
		const auto outputSize = op::flagsToPoint(FLAGS_output_resolution, "-1x-1");
		// netInputSize
		const auto netInputSize = op::flagsToPoint(FLAGS_net_resolution, "240x240");
		// faceNetInputSize
		const auto faceNetInputSize = op::flagsToPoint(FLAGS_face_net_resolution, "368x368 (multiples of 16)");
		// handNetInputSize
		const auto handNetInputSize = op::flagsToPoint(FLAGS_hand_net_resolution, "368x368 (multiples of 16)");
		// poseMode
		const auto poseMode = op::flagsToPoseMode(FLAGS_body);
		// poseModel
		const auto poseModel = op::flagsToPoseModel(FLAGS_model_pose);
		// JSON saving
		if (!FLAGS_write_keypoint.empty())
			op::log("Flag `write_keypoint` is deprecated and will eventually be removed."
				" Please, use `write_json` instead.", op::Priority::Max);
		// keypointScaleMode
		const auto keypointScaleMode = op::flagsToScaleMode(FLAGS_keypoint_scale);
		// heatmaps to add
		const auto heatMapTypes = op::flagsToHeatMaps(FLAGS_heatmaps_add_parts, FLAGS_heatmaps_add_bkg,
			FLAGS_heatmaps_add_PAFs);
		const auto heatMapScaleMode = op::flagsToHeatMapScaleMode(FLAGS_heatmaps_scale);
		// >1 camera view?
		const auto multipleView = (FLAGS_3d || FLAGS_3d_views > 1);
		// Face and hand detectors
		const auto faceDetector = op::flagsToDetector(FLAGS_face_detector);
		const auto handDetector = op::flagsToDetector(FLAGS_hand_detector);
		// Enabling Google Logging
		const bool enableGoogleLogging = true;

		// Pose configuration (use WrapperStructPose{} for default and recommended configuration)
		const op::WrapperStructPose wrapperStructPose{
			poseMode, netInputSize, outputSize, keypointScaleMode, FLAGS_num_gpu, FLAGS_num_gpu_start,
			FLAGS_scale_number, (float)FLAGS_scale_gap, op::flagsToRenderMode(FLAGS_render_pose, multipleView),
			poseModel, !FLAGS_disable_blending, (float)FLAGS_alpha_pose, (float)FLAGS_alpha_heatmap,
			FLAGS_part_to_show, FLAGS_model_folder, heatMapTypes, heatMapScaleMode, FLAGS_part_candidates,
			(float)FLAGS_render_threshold, FLAGS_number_people_max, FLAGS_maximize_positives, FLAGS_fps_max,
			FLAGS_prototxt_path, FLAGS_caffemodel_path, (float)FLAGS_upsampling_ratio, enableGoogleLogging };
		opWrapper.configure(wrapperStructPose);
		// Face configuration (use op::WrapperStructFace{} to disable it)
		const op::WrapperStructFace wrapperStructFace{
			FLAGS_face, faceDetector, faceNetInputSize,
			op::flagsToRenderMode(FLAGS_face_render, multipleView, FLAGS_render_pose),
			(float)FLAGS_face_alpha_pose, (float)FLAGS_face_alpha_heatmap, (float)FLAGS_face_render_threshold };
		opWrapper.configure(wrapperStructFace);
		// Hand configuration (use op::WrapperStructHand{} to disable it)
		const op::WrapperStructHand wrapperStructHand{
			FLAGS_hand, handDetector, handNetInputSize, FLAGS_hand_scale_number, (float)FLAGS_hand_scale_range,
			op::flagsToRenderMode(FLAGS_hand_render, multipleView, FLAGS_render_pose), (float)FLAGS_hand_alpha_pose,
			(float)FLAGS_hand_alpha_heatmap, (float)FLAGS_hand_render_threshold };
		opWrapper.configure(wrapperStructHand);
		// Extra functionality configuration (use op::WrapperStructExtra{} to disable it)
		const op::WrapperStructExtra wrapperStructExtra{
			FLAGS_3d, FLAGS_3d_min_views, FLAGS_identification, FLAGS_tracking, FLAGS_ik_threads };
		opWrapper.configure(wrapperStructExtra);
		// Output (comment or use default argument to disable any output)
		const op::WrapperStructOutput wrapperStructOutput{
			FLAGS_cli_verbose, FLAGS_write_keypoint, op::stringToDataFormat(FLAGS_write_keypoint_format),
			FLAGS_write_json, FLAGS_write_coco_json, FLAGS_write_coco_json_variants, FLAGS_write_coco_json_variant,
			FLAGS_write_images, FLAGS_write_images_format, FLAGS_write_video, FLAGS_write_video_fps,
			FLAGS_write_video_with_audio, FLAGS_write_heatmaps, FLAGS_write_heatmaps_format, FLAGS_write_video_3d,
			FLAGS_write_video_adam, FLAGS_write_bvh, FLAGS_udp_host, FLAGS_udp_port };
		opWrapper.configure(wrapperStructOutput);
		// No GUI. Equivalent to: opWrapper.configure(op::WrapperStructGui{});
		// Set to single-thread (for sequential processing and/or debugging and/or reducing latency)
		if (FLAGS_disable_multi_thread)
			opWrapper.disableMultiThreading();
	}
	catch (const std::exception& e)
	{
		op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
	}
}

void calculate_depth(int stt_pose)
{
	float f = 866.66;
	float b = 90;
	float d = abs(x_center_frame_L[stt_pose] - x_center_frame_R[stt_pose]);
	Z_REAL[stt_pose] = (f*b) / d;
	X_REAL[stt_pose] = x_center_frame_L[stt_pose] * Z_REAL[stt_pose] / f;
	Y_REAL[stt_pose] = y_center_frame_L[stt_pose] * Z_REAL[stt_pose] / f;
	if (stt_pose == 0)
	{
		op::log("XYZ_real_ of  RShoulder", op::Priority::High);
	}
	if (stt_pose == 1)
	{
		op::log("XYZ_real_ of  RElbow  ", op::Priority::High);
	}
	if (stt_pose == 2)
	{
		op::log("XYZ_real_ of  RWrist", op::Priority::High);
	}

	op::log("X_real=" + std::to_string(X_REAL[stt_pose]), op::Priority::High);
	op::log("Y_real=" + std::to_string(Y_REAL[stt_pose]), op::Priority::High);
	op::log("Z_real=" + std::to_string(Z_REAL[stt_pose]), op::Priority::High);
}
void display_line_point_text_rect(cv::Mat imageinput, int X_center, int Y_center, int size)
{
	cv::Mat inputimage_vice = imageinput;
	cv::circle(inputimage_vice, cv::Point(X_center, Y_center), 5, cv::Scalar(13, 187, 255), -1, 8);
	cv::line(inputimage_vice, cv::Point(0, Y_center), cv::Point(640, Y_center), cv::Scalar(22, 45, 248), 1, 8);
	cv::rectangle(inputimage_vice, cv::Point(X_center - size / 2, Y_center - size / 2), cv::Point(X_center + size / 2, Y_center + size / 2), cv::Scalar(16, 225, 40), 1, 8);
	cv::putText(inputimage_vice, "( x=" + std::to_string(X_center) + ",y=" + std::to_string(Y_center) + " )", cv::Point(X_center, Y_center), cv::FONT_HERSHEY_DUPLEX, 0.7, cv::Scalar(255, 72, 51), 2);


}


void match_templ_of_frame_L_to_frame_R(cv::Mat gray_frame_right_input, cv::Mat templ_L_input, int size_template, int stt_pose)
{
	int result_templ_cols = gray_frame_right_input.cols - templ_L_input.cols + 1;

	int result_templ_rows = gray_frame_right_input.rows - templ_L_input.rows + 1;

	//created Mat of result_templ base on gray_frame_right_input and templ_L_input 
	result_templ.create(result_templ_rows, result_templ_cols, CV_32FC1);

	/// Do the Matching and Normalize
	cv::matchTemplate(gray_frame_right_input, templ_L_input, result_templ, cv::TM_CCOEFF_NORMED);
	cv::normalize(result_templ, result_templ, 0, 1, cv::NORM_MINMAX, -1, cv::Mat());
	double minVal;
	double maxVal;
	cv::Point minLoc;
	cv::Point maxLoc;
	cv::Point matchLoc;

	minMaxLoc(result_templ, &minVal, &maxVal, &minLoc, &maxLoc, cv::Mat());
	matchLoc = maxLoc;
	/////
	x_center_frame_R[stt_pose] = matchLoc.x + size_template / 2;
	y_center_frame_R[stt_pose] = matchLoc.y + size_template / 2;
	//////
	calculate_depth(stt_pose);
	///////
	///op::log("x_center_frame_R=" + std::to_string(x_center_frame_R[stt_pose]) + " " + "y_center_frame_R=" + std::to_string(y_center_frame_R[stt_pose]) , op::Priority::High);
	/////
	//cv::rectangle(gray_frame_right_input, matchLoc, cv::Point(matchLoc.x + templ_L_input.cols, matchLoc.y + templ_L_input.rows), cv::Scalar(0, 143, 143), 2, 8);
	//cv::rectangle(result_templ, matchLoc, cv::Point(matchLoc.x + templ_L_input.cols, matchLoc.y + templ_L_input.rows), cv::Scalar(0, 143, 143), 2, 8);
	//cv::imshow("gray_frame_right_input+temp", gray_frame_right_input);
	//display_line_point_text_rect(gray_frame_right_input, matchLoc.x + size_template / 2, matchLoc.y + size_template / 2, size_template);
	display_line_point_text_rect(frame_right_RGB, matchLoc.x + size_template / 2, matchLoc.y + size_template / 2, size_template);
	//cv::imshow("result_templ+temp", result_templ);
}

void get_template_frame_L_size_template_to_R(int size_template, int x_center_frame_L, int y_center_frame_L, int stt_pose)
{
	//create templates fof points of body parts
	templ_L[stt_pose].create(size_template, size_template, CV_32FC1);
	//x,y,width,height
	templ_L[stt_pose] = gray_frame_left(cv::Rect(x_center_frame_L - size_template / 2, y_center_frame_L - size_template / 2, size_template, size_template)).clone();

	//left_display___RBG
	//display_line_point_text_rect(gray_frame_left, x_center_frame_L, y_center_frame_L, size_template, 1111);
	display_line_point_text_rect(frame_left_RGB, x_center_frame_L, y_center_frame_L, size_template);
	//match template_gray

	match_templ_of_frame_L_to_frame_R(gray_frame_right, templ_L[stt_pose], size_template, stt_pose);



	//display_line_point_text
	//display_line_point_text(gray_frame_left_L, x_temp_L_center, y_temp_L_center, size_template, 1111);
	//cv::waitKey(0);
}

void tinh_goc()
{
	


}


int tutorialApiCpp()
{
	try
	{
		//op::log("Starting OpenPose demo...", op::Priority::High);


		// Configuring OpenPose
		//op::log("Configuring OpenPose...", op::Priority::High);
		op::Wrapper opWrapper{ op::ThreadManagerMode::Asynchronous };
		configureWrapper(opWrapper);

		// Starting OpenPose
		//op::log("Starting thread(s)...", op::Priority::High);
		opWrapper.start();
		const auto opTimer = op::getTimerInit();
		/////////////////
		//cv::VideoCapture cap1 = cv::VideoCapture(1);
		cv::VideoCapture cap2 = cv::VideoCapture(2);
		cv::VideoCapture cap0 = cv::VideoCapture(0);
		cap2.set(CV_CAP_PROP_FRAME_WIDTH, 640);
		cap2.set(CV_CAP_PROP_FRAME_HEIGHT, 480);
		//cap1.set(CV_CAP_PROP_FRAME_WIDTH, 640);
		//cap1.set(CV_CAP_PROP_FRAME_HEIGHT, 480);
		cap0.set(CV_CAP_PROP_FRAME_WIDTH, 640);
		cap0.set(CV_CAP_PROP_FRAME_HEIGHT, 480);
		///////////////.
		// Process and display image
		while (true)
		{
			if (cap2.isOpened())  // check if we succeeded
			{
				if (cap0.isOpened())  // check if we succeeded
				{

					//while (stt<1000)
					//{
						//cap-frame_right
					//for (int j=0;j<2;j++)
					//{ 
					cap0 >> frame_right;
					//cap-frame_left
					cap2 >> frame_left;
					cv::waitKey(2);
					//t?o file jpg cho frame L+R
					cv::imwrite(FLAGS_image_path + "right_examples/frame_right_test11" + std::to_string(0) + ".jpg", frame_right);
					cv::imwrite(FLAGS_image_path + "left_examples/frame_left_test11" + std::to_string(0) + ".jpg", frame_left);
					//cv::waitKey(0);
					//i++;
				}
			}
						//stt = i - 2;
				frame_left_RGB = cv::imread(FLAGS_image_path + "left_examples/frame_left_test11" + std::to_string(0) + ".jpg", 1);
				frame_right_RGB = cv::imread(FLAGS_image_path + "right_examples/frame_right_test11" + std::to_string(0) + ".jpg", 1);
				//const auto imageToProcess = cv::imread("C:/Users/BlackPink/Documents/GitHub/openpose/New folder/left_examples/frame_left" + std::to_string(stt) + ".jpg", 1);
				const auto imageToProcess = frame_left_RGB;

				//run openpose
				auto datumProcessed = opWrapper.emplaceAndPop(imageToProcess);

				if (datumProcessed != nullptr)
				{
					//get points of bodyPart =[{2,  "RShoulder"},{3,  "RElbow"},{4,  "RWrist"},]
					printKeypoints(datumProcessed);
					if (x_center_frame_L[0] > 0 && x_center_frame_L[1] > 0 && x_center_frame_L[2] > 0
						&& y_center_frame_L[0] > 0 && y_center_frame_L[1] > 0 && y_center_frame_L[2] > 0)
					{
						//convert to grayscale
						cv::cvtColor(frame_left_RGB, gray_frame_left, CV_BGR2GRAY);
						cv::cvtColor(frame_right_RGB, gray_frame_right, CV_BGR2GRAY);

						//Histogram
						cv::equalizeHist(gray_frame_right, gray_frame_right);
						cv::equalizeHist(gray_frame_left, gray_frame_left);

						///// get template image from frame-left (size) 3 parts of body
						for (int stt_pose_1 = 0; stt_pose_1 < 3; stt_pose_1++)
						{
							get_template_frame_L_size_template_to_R(size_template, x_center_frame_L[stt_pose_1], y_center_frame_L[stt_pose_1], stt_pose_1);
						}

						//////////////
						cv::line(frame_left_RGB, cv::Point(x_center_frame_L[0], y_center_frame_L[0]), cv::Point(x_center_frame_L[1], y_center_frame_L[1]), cv::Scalar(13, 187, 255), 3, 8);
						cv::line(frame_left_RGB, cv::Point(x_center_frame_L[1], y_center_frame_L[1]), cv::Point(x_center_frame_L[2], y_center_frame_L[2]), cv::Scalar(23, 255, 248), 3, 8);
						cv::line(frame_right_RGB, cv::Point(x_center_frame_R[0], y_center_frame_R[0]), cv::Point(x_center_frame_R[1], y_center_frame_R[1]), cv::Scalar(13, 187, 255), 3, 8);
						cv::line(frame_right_RGB, cv::Point(x_center_frame_R[1], y_center_frame_R[1]), cv::Point(x_center_frame_R[2], y_center_frame_R[2]), cv::Scalar(23, 255, 248), 3, 8);
						cv::arrowedLine(frame_left_RGB, cv::Point(x_center_frame_L[0], y_center_frame_L[0]), cv::Point(x_center_frame_L[0], y_center_frame_L[0]+50), cv::Scalar(13, 187, 255),1,8,1,0);
						cv::arrowedLine(frame_left_RGB, cv::Point(x_center_frame_L[0], y_center_frame_L[0]), cv::Point(x_center_frame_L[0] + 50, y_center_frame_L[0] ), cv::Scalar(13, 187, 255), 1, 8, 1, 0);
					}
					////////////////
					frame_left_RGB.copyTo(frame_L_R_RBG(cv::Rect(0, 0, 640, 480)));
					frame_right_RGB.copyTo(frame_L_R_RBG(cv::Rect(640, 0, 640, 480)));

					///////
					//gray_frame_left.copyTo(frame_L_R_gray(cv::Rect(0, 0, 640, 480)));
					//gray_frame_right.copyTo(frame_L_R_gray(cv::Rect(640, 0, 640, 480)));
					///////
					cv::putText(frame_L_R_RBG, "stt=" + std::to_string(stt), cv::Point(0, 320), cv::FONT_HERSHEY_DUPLEX, 1, cv::Scalar(255, 72, 51), 2);
					//cv::imwrite("D:/cap_l_r/frame_L_R_ressulr" + std::to_string(0) + ".jpg", frame_L_R);
					//cv::namedWindow("frame_L_R_gray", 1);
					//cv::imshow("frame_L_R_gray", frame_L_R_gray);
					cv::namedWindow("frame_L_R_RBG_image" + std::to_string(0), 1);
					cv::imshow("frame_L_R_RBG_image" + std::to_string(0), frame_L_R_RBG);
					//cv::namedWindow("frame_L_R_RBG_image", 1);
					//cv::imshow("frame_L_R_RBG_image", frame_L_R_RBG);
					cv::waitKey(1);
					op::printTime(opTimer, "OpenPose demo successfully finished. Total time: ", " seconds.", op::Priority::High);
					tinh_goc();
					//stt++;
					//i++;
					//cv::destroyAllWindows();
					//op::log("done", op::Priority::High);
				}
				else
					op::log("Image could not be processed.", op::Priority::High);
						//frame_left.copyTo(frame_L_R_RBG(cv::Rect(0, 0, 640, 480)));
						//frame_right.copyTo(frame_L_R_RBG(cv::Rect(640, 0, 640, 480)));
						//cv::imshow("frame_L_R_RBG", frame_L_R_RBG);
						//cv::waitKey(0);
						
					//}
				

			

			//while (stt < 1000)
			//{
			//stt = i;
				// read images(RBG)
				
		}
				// Measuring total time
				//op::printTime(opTimer, "OpenPose demo successfully finished. Total time: ", " seconds.", op::Priority::High);
			//}
		//}

		// Return
		return 0;
	}

	catch (const std::exception& e)
	{
		return -1;
	}
}

int main(int argc, char *argv[])
{
	const auto opTimer = op::getTimerInit();
	// Parsing command line flags
	gflags::ParseCommandLineFlags(&argc, &argv, true);

	// // Running tutorialApiCpp


	//while (true)
	while (true)
	{
		int a = tutorialApiCpp();

		if (a == 0)
		{
			op::log("||||||||||||||||||||||||||||||||||||||", op::Priority::High);
			cv::waitKey(0);

		}
	}
	//}
}
